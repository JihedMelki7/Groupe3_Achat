pipeline {
    agent {
        kubernetes {
            yaml '''
apiVersion: v1
kind: Pod
metadata:
  name: agent
  namespace: 3spfe
spec:
  containers:
    - name: jnlp
      image: quay.io/openshift/origin-jenkins-agent-maven
      command: ["sleep", "9999999"]
      tty: true
      workingDir: /home/jenkins/agent
    - name: docker
      image: docker:19.03
      command: ["sh", "-c", "sleep 9999999"]
      tty: true
      securityContext:
        privileged: true
        runAsUser: 0
      volumeMounts:
        - mountPath: /var/run/docker.sock
          name: docker-socket-volume
  volumes:
    - name: docker-socket-volume
      hostPath:
        path: /var/run/docker.sock
        type: File
  nodeSelector:
    kubernetes.io/hostname: compute.3s.com
            '''
        }
    }
    tools {
        maven "Maven"
        dockerTool "docker"   
    }
    stages {
        stage('Checkout Git') {
            steps {
                echo 'Pulling...'
                git branch: 'facture-achref',
                    url: 'https://github.com/JihedMelki7/Groupe3_Achat.git'
            }
        }
        stage('Clean') {
            steps {
                script {
                    sh 'mvn clean'
                }
            }
        }
        stage('Compile') {
            steps {
                script {
                    sh 'mvn compile'
                }
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonarqueb') {
                    sh "mvn sonar:sonar"
                }
            }
        }
        stage('MVN TEST') {
            steps {
                sh 'mvn test'
            }
        }
        stage('Nexus') {
            steps {
                script {
                    sh 'mvn deploy -DskipTests'
                }
            }
        }
        stage('BUILD IMAGE') {
            steps {
                container('docker') {
                    sh 'docker build -t achat:1-0 .'
                }
            }
        }
        stage('Push vers Docker Hub') {
            steps {
                script {
                    def dockerHubImageName = "achrefdoce/chat:latest"
                    withCredentials([string(credentialsId: 'dockerhub', variable: 'dockerhub')]) {
                        sh 'docker login -u achrefdoce -p ${dockerhub}'
                        sh "docker tag achat:1-0 $dockerHubImageName"
                        sh "docker push $dockerHubImageName"
                    }
                }
            }
        }
    }
}
