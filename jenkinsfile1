pipeline {
    agent {
        label 'kubeagent'
    }

    stages {
        stage('Checkout Git') {
            steps {
                echo 'Pulling...'
                git branch: 'facture-achref',
                    url: 'https://github.com/JihedMelki7/Groupe3_Achat.git'
            }
        }
        stage('Clean') {
            steps {
                script {
                    sh 'mvn clean'
                }
            }
        }
        stage('Compile') {
            steps {
                script {
                    sh 'mvn compile'
                }
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonarqueb') {
                    sh "mvn sonar:sonar"
                }
            }
        }
        stage('MVN TEST') {
            steps {
                sh 'mvn test'
            }
        }
        stage('Nexus') {
            steps {
                script {
                    sh 'mvn deploy -DskipTests'
                }
            }
        }
        stage('BUILD IMAGE') {
            steps {
                container('docker') {
                    sh 'docker build -t achat:1-0 .'
                }
            }
        }
        stage('Push vers Docker Hub') {
            steps {
                container('docker') {
                    script {
                        def dockerHubImageName = "achrefdoce/chat:latest"
                        withCredentials([string(credentialsId: 'dockerhub', variable: 'dockerhub')]) {
                            sh 'docker login -u achrefdoce -p ${dockerhub}'
                            sh "docker tag achat:1-0 $dockerHubImageName"
                            sh "docker push $dockerHubImageName"
                        }
                    }
                }
            }
        }
        // Étape pour créer le namespace si non existant
        stage('Create Namespace') {
            steps {
                script {
                    def namespace = 'deploy' // Modifiez le nom du namespace si nécessaire
                    def exists = sh(script: "oc get namespace ${namespace} --no-headers", returnStatus: true) == 0
                    if (!exists) {
                        sh "oc create namespace ${namespace}"
                        echo "Namespace '${namespace}' created."
                    } else {
                        echo "Namespace '${namespace}' already exists."
                    }
                }
            }
        }
        stage('Download Backend Deployment File') {
            steps {
                script {
                    // Télécharger le fichier YAML du backend
                    sh 'curl -o deployment_back.yml https://raw.githubusercontent.com/JihedMelki7/Groupe3_Achat/facture-achref/deployment_back.yml'
                }
            }
        }
        stage('Deploy Backend to OpenShift') {
            steps {
                script {
                    // Déployer le backend dans le namespace spécifié
                    sh 'oc apply -f deployment_back.yml -n deploy'
                }
            }
        }
        stage('Download Frontend Deployment File') {
            steps {
                script {
                    // Télécharger le fichier YAML du frontend
                    sh 'curl -o deployment_front.yml https://raw.githubusercontent.com/JihedMelki7/Groupe3_Achat/facture-achref/deployment_front.yml'
                }
            }
        }
        stage('Deploy Frontend to OpenShift') {
            steps {
                script {
                    // Déployer le frontend dans le namespace spécifié
                    sh 'oc apply -f deployment_front.yml -n deploy'
                }
            }
        }
    }
}
