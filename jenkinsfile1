pipeline {
    agent any

    stages {
        stage('Checkout Git') {
            steps {
                echo 'Pulling...'
                git branch: 'facture-achref',
                url : 'https://github.com/JihedMelki7/Groupe3_Achat.git'
            }
        }

        stage('Clean') {
            steps {
                script {
                    // Clean the project
                    sh 'mvn clean'
                }
            }
        }

        stage('Compile') {
            steps {
                script {
                    // Compile the project
                    sh 'mvn compile'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonarqueb') {
                    sh "mvn sonar:sonar"
                }
            }
        }

        stage ('MVN TEST') {
            steps {
                sh 'mvn test'
            }
        }

        stage('Nexus') {
            steps {
                script {
                    // Exécute la commande "mvn deploy" en sautant les tests
                    sh 'mvn deploy -DskipTests'
                }
            }
        }
   stage('BUILD IMAGE'){
      steps{
        sh 'docker build -t achat:1-0 . '
      }
    }
stage('Push vers Docker Hub') {
    steps {
        script {
            // Identifiants Docker Hub
            def dockerHubUsername = "achrefdoce"  // Remplacez par votre nom d'utilisateur Docker Hub
            def dockerHubToken = "dckr_pat_oXKbwxDrxfHxgNlnHtOL48JY_d0"  // Remplacez par votre token d'accès

            // Nom de l'image et tag
            def dockerImageName = "achat:1-0"
            def dockerHubImageName = "achrefdoce/achat:1-0"  // Remplacez par votre nom d'utilisateur et le nom de l'image sur Docker Hub

            // Se connecter à Docker Hub avec le token
            withCredentials([string(credentialsId: 'DOCKERHUB_TOKEN', variable: 'DOCKER_TOKEN')]) {
                sh "echo $DOCKER_TOKEN | docker login --username $dockerHubUsername --password-stdin"
            }

            // Tag l'image pour Docker Hub
            sh "docker tag $dockerImageName $dockerHubImageName"

            // Pousser l'image vers Docker Hub
            sh "docker push $dockerHubImageName"
        }
    }
}


    }
}
